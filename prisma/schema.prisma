// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ===================================================
// ENUMS
// ===================================================

enum PaySchedule {
  WEEKLY
  BIWEEKLY
  SEMIMONTHLY
  MONTHLY
  IRREGULAR // freelancer/contractor
}

enum DebtType {
  FIXED_AMORTIZING // loans with fixed payment & term (auto, mortgage, personal)
  REVOLVING // credit cards etc; min payment %
}

// ===================================================
// MODELS
// ===================================================

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile         UserProfile?
  accounts        Account[]
  transactions    Transaction[]
  categories      Category[]
  budgetEntries   BudgetEntry[]
  goals           Goal[]
  debts           Debt[]
  incomeRecurring IncomeRecurring[]
  incomeOneOff    IncomeOneOff[]

  // Enhanced budget relations
  categoryGroups CategoryGroup[]
  budgetMonths   BudgetMonth[]
  budgetItems    BudgetItem[]

  // New relations
  bills       Bill[]
  investments InvestmentPlan[]

  // Foxy coach relations
  coachState    UserCoachState? @relation("UserCoachState")
  coachMessages CoachMessage[]  @relation("CoachMessages")

  // V2 Enhanced relations
  debtAccounts        DebtAccount[]         @relation("UserDebts")
  goalsV2             GoalV2[]              @relation("UserGoals")
  incomeSources       IncomeSource[]        @relation("UserIncome")
  investmentAccounts  InvestmentAccountV2[] @relation("UserInvestments")
  allocationTemplates AllocationTemplate[]  @relation("UserTemplates")
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  onboardingStep Int     @default(0)
  onboardingDone Boolean @default(false)

  hasCar       Boolean     @default(false)
  country      String?
  currency     String      @default("USD")
  paySchedule  PaySchedule @default(MONTHLY)
  baseTakeHome Int? // in cents
  nextPayDate  DateTime?

  // Notification preferences (JSON)
  notifPrefs Json?

  // UI preferences
  weekStart    String @default("sunday")
  dateFormat   String @default("MM/DD/YYYY")
  budgetPeriod String @default("monthly")

  // Enhanced onboarding fields
  displayName     String?
  timezone        String   @default("UTC")
  lastActiveAt    DateTime @default(now())
  streakDays      Int      @default(0) // gamification
  preferRollover  Boolean  @default(true)
  quickAddEnabled Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name         String
  type         String // checking, savings, credit, cash
  balanceCents Int     @default(0)
  archived     Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions Transaction[]
  bills        Bill[]
}

model Transaction {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  date        DateTime
  merchant    String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  type        String // INCOME, EXPENSE, TRANSFER
  amountCents Int
  note        String?

  // Enhanced fields for catch-up and tracking
  isApproximate Boolean @default(false)
  source        String? // 'manual' | 'import' | 'catch_up' | 'estimate'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
}

model Category {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name               String
  groupName          String? // Bills & Utilities, Food, etc. (legacy)
  type               String // income, expense
  monthlyBudgetCents Int     @default(0)
  rollover           Boolean @default(true)

  // Enhanced fields for new budget system
  groupId   String?
  group     CategoryGroup? @relation("CategoryToGroup", fields: [groupId], references: [id])
  priority  Int            @default(3) // 1-5
  sortOrder Int            @default(0)
  archived  Boolean        @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions  Transaction[]
  budgetEntries BudgetEntry[]
  budgetItems   BudgetItem[]
  bills         Bill[]

  @@unique([userId, name])
}

model BudgetEntry {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  month      Int
  year       Int
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  assignedCents Int @default(0)
  spentCents    Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, year, month, categoryId])
}

model Debt {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name            String
  balanceCents    Int
  rate            Float // APR as decimal (e.g., 4.50)
  minPaymentCents Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Goal {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  targetCents Int
  savedCents  Int       @default(0)
  dueDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IncomeRecurring {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  amountCents Int
  schedule    PaySchedule
  nextDate    DateTime
  active      Boolean     @default(true)

  recurrenceId String?
  recurrence   Recurrence? @relation("IncomeRecurrence", fields: [recurrenceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model IncomeOneOff {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name        String
  amountCents Int
  date        DateTime
  note        String?

  createdAt DateTime @default(now())
}

// Enhanced Budget Models
model CategoryGroup {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  name      String
  icon      String? // emoji or lucide name
  sortOrder Int     @default(0)
  isDefault Boolean @default(false)

  categories Category[] @relation("CategoryToGroup")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
}

model BudgetMonth {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  month           String // YYYY-MM format
  expectedIncome  Decimal @default(0) @db.Decimal(12, 2)
  allowOverAssign Boolean @default(false)

  budgetItems BudgetItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month])
}

model BudgetItem {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  month       String // YYYY-MM format
  budgetMonth BudgetMonth @relation(fields: [userId, month], references: [userId, month])
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  assigned         Decimal @default(0) @db.Decimal(12, 2)
  spent            Decimal @default(0) @db.Decimal(12, 2)
  leftoverFromPrev Decimal @default(0) @db.Decimal(12, 2) // rollover carry-over

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, month, categoryId])
}

// Onboarding Models
model OnboardingSession {
  id          String   @id @default(cuid())
  userId      String
  currentStep Int      @default(0) // 0..6
  completed   Boolean  @default(false)
  stepsDone   Json? // array of step keys
  answers     Json? // raw form payloads per step
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model QuickCapture {
  id         String    @id @default(cuid())
  userId     String
  total      Decimal   @db.Decimal(12, 2)
  method     String // "smart" | "manual"
  periodFrom DateTime?
  periodTo   DateTime?
  breakdown  Json // [{categoryId, amount}]
  note       String? // e.g., "Quick estimate"
  createdAt  DateTime  @default(now())

  @@index([userId])
}

// Core User Preferences
model UserPrefs {
  id                   String   @id @default(cuid())
  userId               String   @unique
  currency             String   @default("USD")
  timezone             String   @default("UTC")
  theme                String   @default("system") // "light" | "dark" | "system"
  softBudgetLimit      Boolean  @default(true) // allow over-assign with warning vs hard block
  allowRolloverDefault Boolean  @default(true) // default rollover setting for new categories
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

// Onboarding Snapshot (Source of Truth)
model OnboardingProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  completedAt DateTime
  income      Json // OnbIncome type
  bills       Json // OnbBill[] type
  debts       Json // OnbDebt[] type
  goals       Json // OnbGoal[] type
  categories  Json // OnbCategorySetup type
  investments Json? // OnbInvestment[] type (optional)
  trialEndsAt DateTime? // for trial tracking
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
}

// Recurrence Support
model Recurrence {
  id         String    @id @default(cuid())
  frequency  String // 'daily'|'weekly'|'bi-weekly'|'monthly'|'quarterly'|'semi-annual'|'annual'|'custom-cron'
  interval   Int       @default(1)
  byMonthDay Int? // for monthly: 1-31
  byWeekday  String? // for weekly: "mon,wed,fri"
  startDate  DateTime
  endDate    DateTime?
  active     Boolean   @default(true)
  timezone   String    @default("UTC")
  cron       String? // for custom frequency
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  bills       Bill[]
  incomes     IncomeRecurring[] @relation("IncomeRecurrence")
  investments InvestmentPlan[]
}

// Enhanced Bill Model
model Bill {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  amount       Decimal     @db.Decimal(12, 2)
  categoryId   String?
  category     Category?   @relation(fields: [categoryId], references: [id])
  accountId    String?
  account      Account?    @relation(fields: [accountId], references: [id])
  recurrenceId String?
  recurrence   Recurrence? @relation(fields: [recurrenceId], references: [id])
  nextDue      DateTime?
  lastPaid     DateTime?
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([nextDue])
}

// Investment Plans
model InvestmentPlan {
  id           String      @id @default(cuid())
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String
  amount       Decimal     @db.Decimal(12, 2)
  expectedAPR  Float       @default(0)
  recurrenceId String?
  recurrence   Recurrence? @relation(fields: [recurrenceId], references: [id])
  nextDate     DateTime?
  autoInvest   Boolean     @default(false)
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([nextDate])
}

// ===================================================
// FOXY AI COACH MODELS
// ===================================================

enum CoachMode {
  TUTORIAL
  COACH
}

enum TutorialModule {
  DASHBOARD
  BUDGET
  INCOME
  TRANSACTIONS
  BILLS
  DEBTS
  GOALS
  REPORTS
  NOTIFICATIONS
  SETTINGS
}

enum MessageRole {
  SYSTEM
  ASSISTANT
  USER
}

model UserCoachState {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation("UserCoachState", fields: [userId], references: [id], onDelete: Cascade)

  mode                CoachMode @default(TUTORIAL)
  tutorialProgress    Int       @default(0) // 0-100
  completedStepIds    String[]  @default([])
  unlockedBadges      String[]  @default([])
  streakDays          Int       @default(0)
  lastActiveAt        DateTime  @default(now())
  coachPersonaVersion String    @default("v1")
  dismissedHints      Json      @default("{}")

  // Tutorial preferences
  tutorialStartedAt   DateTime?
  tutorialCompletedAt DateTime?
  skipTutorial        Boolean   @default(false)

  // Coach preferences
  coachEnabled        Boolean @default(true)
  hintsEnabled        Boolean @default(true)
  celebrationsEnabled Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages CoachMessage[]

  @@index([userId])
}

model TutorialStep {
  id              String         @id // e.g., 'dashboard_intro'
  module          TutorialModule
  order           Int
  title           String
  copy            String
  targetSelector  String? // CSS selector or anchor ID
  completionEvent String // e.g., 'view_dashboard', 'create_category'
  skippable       Boolean        @default(true)

  // Optional step configuration
  config Json? // Additional step configuration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([module, order])
  @@index([module])
}

model Badge {
  id          String @id // e.g., 'budget_explorer'
  title       String
  description String
  icon        String // emoji or lucide icon name
  category    String @default("general") // general, budget, goals, etc.

  // Unlock conditions
  unlockRule Json // { event: string, threshold?: number, conditions?: any }

  // Display properties
  color  String @default("blue")
  rarity String @default("common") // common, rare, epic, legendary

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
}

model CoachMessage {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("CoachMessages", fields: [userId], references: [id], onDelete: Cascade)

  coachStateId String
  coachState   UserCoachState @relation(fields: [coachStateId], references: [id], onDelete: Cascade)

  role     MessageRole
  content  String
  metadata Json? // tool calls, context, etc.

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([coachStateId])
}

// ===================================================
// ENHANCED FINANCIAL MODELS (V2)
// ===================================================

model DebtAccount {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserDebts", fields: [userId], references: [id], onDelete: Cascade)

  name             String
  type             String // credit_card, loan, line_of_credit, student_loan, other
  currency         String    @default("USD")
  principalBalance Decimal   @db.Decimal(12, 2)
  apr              Float
  minPayment       Decimal   @db.Decimal(12, 2)
  statementDay     Int? // 1-31 or -1 for last day
  dueDay           Int? // 1-31 or -1 for last day
  termMonths       Int?
  creditLimit      Decimal?  @db.Decimal(12, 2)
  startDate        DateTime
  timezone         String    @default("UTC")
  autopayEnabled   Boolean   @default(false)
  autopayAccountId String?
  promoRate        Float?
  promoEndsOn      DateTime?
  notes            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  archivedAt       DateTime?

  payments DebtPayment[]

  @@index([userId])
  @@index([dueDay])
}

model DebtPayment {
  id            String      @id @default(cuid())
  debtId        String
  debt          DebtAccount @relation(fields: [debtId], references: [id], onDelete: Cascade)
  transactionId String?
  paidAt        DateTime
  amount        Decimal     @db.Decimal(12, 2)
  interestPaid  Decimal     @db.Decimal(12, 2)
  principalPaid Decimal     @db.Decimal(12, 2)
  feesPaid      Decimal     @default(0) @db.Decimal(12, 2)
  fxRateUsed    Float?

  createdAt DateTime @default(now())

  @@index([debtId])
  @@index([paidAt])
}

model GoalV2 {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserGoals", fields: [userId], references: [id], onDelete: Cascade)

  name             String
  priority         Int // 1-5
  targetAmount     Decimal   @db.Decimal(12, 2)
  currency         String    @default("USD")
  targetDate       DateTime?
  categoryId       String?
  fundingAccountId String?
  notifyEnabled    Boolean   @default(false)
  notifyRules      Json? // { daysBefore: [30,7], offPace: true, milestone: [25,50,75,100] }
  status           String    @default("ACTIVE") // ACTIVE, PAUSED, COMPLETED, ARCHIVED

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contributions GoalContribution[]
  plans         GoalPlan[]
  milestones    GoalMilestone[]

  @@index([userId])
  @@index([status])
}

model GoalContribution {
  id     String @id @default(cuid())
  goalId String
  goal   GoalV2 @relation(fields: [goalId], references: [id], onDelete: Cascade)
  userId String

  date          DateTime
  amount        Decimal  @db.Decimal(12, 2)
  amountBase    Decimal? @db.Decimal(12, 2)
  fxRateUsed    Float?
  source        String // RTA, TRANSFER, ONE_OFF, ROUND_UP, QUICK_CATCH_UP
  accountId     String?
  transactionId String?
  note          String?

  createdAt DateTime @default(now())

  @@index([goalId])
  @@index([userId])
  @@index([date])
}

model GoalPlan {
  id     String @id @default(cuid())
  goalId String
  goal   GoalV2 @relation(fields: [goalId], references: [id], onDelete: Cascade)

  month   String // YYYY-MM
  planned Decimal @db.Decimal(12, 2)

  createdAt DateTime @default(now())

  @@unique([goalId, month])
  @@index([goalId])
}

model GoalMilestone {
  id     String @id @default(cuid())
  goalId String
  goal   GoalV2 @relation(fields: [goalId], references: [id], onDelete: Cascade)

  percent   Int // 25, 50, 75, 100
  reachedAt DateTime

  @@unique([goalId, percent])
  @@index([goalId])
}

model IncomeSource {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserIncome", fields: [userId], references: [id], onDelete: Cascade)

  name                 String
  type                 String // EMPLOYMENT, FREELANCE, BENEFIT, OTHER
  currency             String    @default("USD")
  gross                Decimal?  @db.Decimal(12, 2)
  net                  Decimal?  @db.Decimal(12, 2)
  paySchedule          String // MONTHLY, SEMI_MONTHLY, BIWEEKLY, WEEKLY, CUSTOM
  anchorDate           DateTime
  dayOfMonth           Int?
  secondDay            Int?
  weekday              Int?
  everyNWeeks          Int?
  endOn                DateTime?
  timezone             String    @default("UTC")
  autopost             Boolean   @default(true)
  allocationTemplateId String?
  notes                String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deductions  IncomeDeduction[]
  occurrences IncomeOccurrence[]

  @@index([userId])
  @@index([autopost])
}

model IncomeDeduction {
  id       String       @id @default(cuid())
  sourceId String
  source   IncomeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  label String // Tax, Insurance, 401k, etc.
  kind  String // PERCENT, FIXED
  value Decimal @db.Decimal(12, 2)

  @@index([sourceId])
}

model IncomeOccurrence {
  id       String       @id @default(cuid())
  sourceId String
  source   IncomeSource @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  userId   String

  scheduledAt DateTime
  postedAt    DateTime?
  gross       Decimal?  @db.Decimal(12, 2)
  net         Decimal   @db.Decimal(12, 2)
  currency    String    @default("USD")
  status      String    @default("SCHEDULED") // SCHEDULED, RECEIVED, SKIPPED
  txId        String?
  budgetMonth String // YYYY-MM

  createdAt DateTime @default(now())

  @@index([sourceId])
  @@index([userId])
  @@index([scheduledAt])
  @@index([status])
}

model InvestmentAccountV2 {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserInvestments", fields: [userId], references: [id], onDelete: Cascade)

  name          String
  type          String // BROKERAGE, RETIREMENT, SAVINGS, CRYPTO, OTHER
  currency      String   @default("USD")
  trackHoldings Boolean  @default(false)
  currentValue  Decimal? @db.Decimal(12, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plans         InvestmentPlanV2[]
  contributions InvestmentContributionV2[]
  snapshots     HoldingSnapshot[]

  @@index([userId])
}

model InvestmentPlanV2 {
  id        String              @id @default(cuid())
  userId    String
  accountId String
  account   InvestmentAccountV2 @relation(fields: [accountId], references: [id], onDelete: Cascade)

  name          String
  amount        Decimal  @db.Decimal(12, 2)
  currency      String   @default("USD")
  cadence       String // MONTHLY, SEMI_MONTHLY, BIWEEKLY, WEEKLY, CUSTOM
  anchorDate    DateTime
  dayOfMonth    Int?
  weekday       Int?
  everyNWeeks   Int?
  aprAssumption Float?
  autopay       Boolean  @default(false)
  active        Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contributions InvestmentContributionV2[]

  @@index([userId])
  @@index([accountId])
  @@index([active])
}

model InvestmentContributionV2 {
  id        String              @id @default(cuid())
  planId    String?
  plan      InvestmentPlanV2?   @relation(fields: [planId], references: [id])
  accountId String
  account   InvestmentAccountV2 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId    String

  date        DateTime
  amount      Decimal  @db.Decimal(12, 2)
  currency    String   @default("USD")
  source      String // RTA, TRANSFER, ONE_OFF
  txId        String?
  budgetMonth String // YYYY-MM
  note        String?

  createdAt DateTime @default(now())

  @@index([accountId])
  @@index([userId])
  @@index([date])
}

model HoldingSnapshot {
  id        String              @id @default(cuid())
  accountId String
  account   InvestmentAccountV2 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userId    String

  asOf     DateTime
  value    Decimal  @db.Decimal(12, 2)
  currency String   @default("USD")

  createdAt DateTime @default(now())

  @@index([accountId])
  @@index([userId])
  @@index([asOf])
}

model AllocationTemplate {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserTemplates", fields: [userId], references: [id], onDelete: Cascade)

  name  String
  rules Json // Array of { categoryId, categoryName, percentage, priority }

  createdAt DateTime @default(now())

  @@index([userId])
}
