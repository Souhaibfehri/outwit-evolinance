name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: |
        npm ci --only=production
        npm install --save-dev @types/node typescript
        
    - name: 🔧 Generate Prisma Client
      run: npx prisma generate
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        SKIP_ENV_VALIDATION: true
        NEXT_PUBLIC_SUPABASE_URL: https://placeholder.supabase.co
        NEXT_PUBLIC_SUPABASE_ANON_KEY: placeholder-key
        NEXTAUTH_SECRET: placeholder-secret-for-build-only
        NEXTAUTH_URL: https://placeholder.com
        
    - name: 🧪 Run tests (if available)
      run: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm test -- --passWithNoTests
        else
          echo "No tests found, skipping..."
        fi
      continue-on-error: true

  # Deploy to Vercel
  deploy-vercel:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 🌐 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'

  # Deploy to Custom Server (Alternative)
  deploy-custom:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Generate Prisma Client
      run: npx prisma generate
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: 📤 Deploy to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          cd /var/www/outwit-budget
          git pull origin main
          npm ci --only=production
          npm run build
          pm2 restart outwit-budget

  # Notify deployment status
  notify:
    needs: [deploy-vercel]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
